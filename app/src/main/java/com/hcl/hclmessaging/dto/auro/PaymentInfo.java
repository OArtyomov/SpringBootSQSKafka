/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hcl.hclmessaging.dto.auro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1903155919639856506L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentInfo\",\"namespace\":\"com.hcl.hclmessaging.dto.auro\",\"fields\":[{\"name\":\"cardNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardType\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardHolderName\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardExpiry\",\"type\":[\"string\",\"null\"]},{\"name\":\"paymentMethod\",\"type\":[\"string\",\"null\"]},{\"name\":\"amount\",\"type\":[\"bytes\",\"null\"],\"logicalType\":\"decimal\",\"java-class\":\"java.math.BigDecimal\",\"precision\":4,\"scale\":2}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentInfo> ENCODER =
      new BinaryMessageEncoder<PaymentInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentInfo> DECODER =
      new BinaryMessageDecoder<PaymentInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PaymentInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PaymentInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PaymentInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PaymentInfo from a ByteBuffer. */
  public static PaymentInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence cardNumber;
  @Deprecated public java.lang.CharSequence cardType;
  @Deprecated public java.lang.CharSequence cardHolderName;
  @Deprecated public java.lang.CharSequence cardExpiry;
  @Deprecated public java.lang.CharSequence paymentMethod;
  @Deprecated public java.nio.ByteBuffer amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentInfo() {}

  /**
   * All-args constructor.
   * @param cardNumber The new value for cardNumber
   * @param cardType The new value for cardType
   * @param cardHolderName The new value for cardHolderName
   * @param cardExpiry The new value for cardExpiry
   * @param paymentMethod The new value for paymentMethod
   * @param amount The new value for amount
   */
  public PaymentInfo(java.lang.CharSequence cardNumber, java.lang.CharSequence cardType, java.lang.CharSequence cardHolderName, java.lang.CharSequence cardExpiry, java.lang.CharSequence paymentMethod, java.nio.ByteBuffer amount) {
    this.cardNumber = cardNumber;
    this.cardType = cardType;
    this.cardHolderName = cardHolderName;
    this.cardExpiry = cardExpiry;
    this.paymentMethod = paymentMethod;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cardNumber;
    case 1: return cardType;
    case 2: return cardHolderName;
    case 3: return cardExpiry;
    case 4: return paymentMethod;
    case 5: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cardNumber = (java.lang.CharSequence)value$; break;
    case 1: cardType = (java.lang.CharSequence)value$; break;
    case 2: cardHolderName = (java.lang.CharSequence)value$; break;
    case 3: cardExpiry = (java.lang.CharSequence)value$; break;
    case 4: paymentMethod = (java.lang.CharSequence)value$; break;
    case 5: amount = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cardNumber' field.
   * @return The value of the 'cardNumber' field.
   */
  public java.lang.CharSequence getCardNumber() {
    return cardNumber;
  }

  /**
   * Sets the value of the 'cardNumber' field.
   * @param value the value to set.
   */
  public void setCardNumber(java.lang.CharSequence value) {
    this.cardNumber = value;
  }

  /**
   * Gets the value of the 'cardType' field.
   * @return The value of the 'cardType' field.
   */
  public java.lang.CharSequence getCardType() {
    return cardType;
  }

  /**
   * Sets the value of the 'cardType' field.
   * @param value the value to set.
   */
  public void setCardType(java.lang.CharSequence value) {
    this.cardType = value;
  }

  /**
   * Gets the value of the 'cardHolderName' field.
   * @return The value of the 'cardHolderName' field.
   */
  public java.lang.CharSequence getCardHolderName() {
    return cardHolderName;
  }

  /**
   * Sets the value of the 'cardHolderName' field.
   * @param value the value to set.
   */
  public void setCardHolderName(java.lang.CharSequence value) {
    this.cardHolderName = value;
  }

  /**
   * Gets the value of the 'cardExpiry' field.
   * @return The value of the 'cardExpiry' field.
   */
  public java.lang.CharSequence getCardExpiry() {
    return cardExpiry;
  }

  /**
   * Sets the value of the 'cardExpiry' field.
   * @param value the value to set.
   */
  public void setCardExpiry(java.lang.CharSequence value) {
    this.cardExpiry = value;
  }

  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public java.lang.CharSequence getPaymentMethod() {
    return paymentMethod;
  }

  /**
   * Sets the value of the 'paymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(java.lang.CharSequence value) {
    this.paymentMethod = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Creates a new PaymentInfo RecordBuilder.
   * @return A new PaymentInfo RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder newBuilder() {
    return new com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder();
  }

  /**
   * Creates a new PaymentInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentInfo RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder newBuilder(com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder other) {
    return new com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder(other);
  }

  /**
   * Creates a new PaymentInfo RecordBuilder by copying an existing PaymentInfo instance.
   * @param other The existing instance to copy.
   * @return A new PaymentInfo RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder newBuilder(com.hcl.hclmessaging.dto.auro.PaymentInfo other) {
    return new com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder(other);
  }

  /**
   * RecordBuilder for PaymentInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentInfo>
    implements org.apache.avro.data.RecordBuilder<PaymentInfo> {

    private java.lang.CharSequence cardNumber;
    private java.lang.CharSequence cardType;
    private java.lang.CharSequence cardHolderName;
    private java.lang.CharSequence cardExpiry;
    private java.lang.CharSequence paymentMethod;
    private java.nio.ByteBuffer amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[0].schema(), other.cardNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cardType)) {
        this.cardType = data().deepCopy(fields()[1].schema(), other.cardType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cardHolderName)) {
        this.cardHolderName = data().deepCopy(fields()[2].schema(), other.cardHolderName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cardExpiry)) {
        this.cardExpiry = data().deepCopy(fields()[3].schema(), other.cardExpiry);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[4].schema(), other.paymentMethod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.PaymentInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[0].schema(), other.cardNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cardType)) {
        this.cardType = data().deepCopy(fields()[1].schema(), other.cardType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cardHolderName)) {
        this.cardHolderName = data().deepCopy(fields()[2].schema(), other.cardHolderName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cardExpiry)) {
        this.cardExpiry = data().deepCopy(fields()[3].schema(), other.cardExpiry);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[4].schema(), other.paymentMethod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'cardNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardNumber() {
      return cardNumber;
    }

    /**
      * Sets the value of the 'cardNumber' field.
      * @param value The value of 'cardNumber'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setCardNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.cardNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cardNumber' field has been set.
      * @return True if the 'cardNumber' field has been set, false otherwise.
      */
    public boolean hasCardNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cardNumber' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearCardNumber() {
      cardNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardType' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardType() {
      return cardType;
    }

    /**
      * Sets the value of the 'cardType' field.
      * @param value The value of 'cardType'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setCardType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cardType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cardType' field has been set.
      * @return True if the 'cardType' field has been set, false otherwise.
      */
    public boolean hasCardType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cardType' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearCardType() {
      cardType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardHolderName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardHolderName() {
      return cardHolderName;
    }

    /**
      * Sets the value of the 'cardHolderName' field.
      * @param value The value of 'cardHolderName'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setCardHolderName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.cardHolderName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cardHolderName' field has been set.
      * @return True if the 'cardHolderName' field has been set, false otherwise.
      */
    public boolean hasCardHolderName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cardHolderName' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearCardHolderName() {
      cardHolderName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardExpiry' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardExpiry() {
      return cardExpiry;
    }

    /**
      * Sets the value of the 'cardExpiry' field.
      * @param value The value of 'cardExpiry'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setCardExpiry(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.cardExpiry = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cardExpiry' field has been set.
      * @return True if the 'cardExpiry' field has been set, false otherwise.
      */
    public boolean hasCardExpiry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cardExpiry' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearCardExpiry() {
      cardExpiry = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentMethod() {
      return paymentMethod;
    }

    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setPaymentMethod(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.paymentMethod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.PaymentInfo.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentInfo build() {
      try {
        PaymentInfo record = new PaymentInfo();
        record.cardNumber = fieldSetFlags()[0] ? this.cardNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cardType = fieldSetFlags()[1] ? this.cardType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.cardHolderName = fieldSetFlags()[2] ? this.cardHolderName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.cardExpiry = fieldSetFlags()[3] ? this.cardExpiry : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.paymentMethod = fieldSetFlags()[4] ? this.paymentMethod : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.amount = fieldSetFlags()[5] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentInfo>
    READER$ = (org.apache.avro.io.DatumReader<PaymentInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hcl.hclmessaging.dto.auro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Sku extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7078864699018420408L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sku\",\"namespace\":\"com.hcl.hclmessaging.dto.auro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"lineItemPrice\",\"type\":{\"type\":\"record\",\"name\":\"LineItemPrice\",\"fields\":[{\"name\":\"currencyCode\",\"type\":\"string\"},{\"name\":\"itemPriceBeforeDiscount\",\"type\":\"bytes\",\"java-class\":\"java.math.BigDecimal\",\"logicalType\":\"decimal\",\"precision\":4,\"scale\":2},{\"name\":\"discount\",\"type\":\"bytes\",\"java-class\":\"java.math.BigDecimal\",\"logicalType\":\"decimal\",\"precision\":4,\"scale\":2},{\"name\":\"itemPriceAfterDiscount\",\"type\":\"bytes\",\"java-class\":\"java.math.BigDecimal\",\"logicalType\":\"decimal\",\"precision\":4,\"scale\":2}]}},{\"name\":\"images\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Image\",\"fields\":[{\"name\":\"url\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sku> ENCODER =
      new BinaryMessageEncoder<Sku>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sku> DECODER =
      new BinaryMessageDecoder<Sku>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Sku> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Sku> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sku>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Sku to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Sku from a ByteBuffer. */
  public static Sku fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence code;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;
  @Deprecated public com.hcl.hclmessaging.dto.auro.LineItemPrice lineItemPrice;
  @Deprecated public java.util.List<com.hcl.hclmessaging.dto.auro.Image> images;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sku() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param code The new value for code
   * @param attributes The new value for attributes
   * @param lineItemPrice The new value for lineItemPrice
   * @param images The new value for images
   */
  public Sku(java.lang.Integer id, java.lang.CharSequence code, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes, com.hcl.hclmessaging.dto.auro.LineItemPrice lineItemPrice, java.util.List<com.hcl.hclmessaging.dto.auro.Image> images) {
    this.id = id;
    this.code = code;
    this.attributes = attributes;
    this.lineItemPrice = lineItemPrice;
    this.images = images;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return code;
    case 2: return attributes;
    case 3: return lineItemPrice;
    case 4: return images;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 3: lineItemPrice = (com.hcl.hclmessaging.dto.auro.LineItemPrice)value$; break;
    case 4: images = (java.util.List<com.hcl.hclmessaging.dto.auro.Image>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'lineItemPrice' field.
   * @return The value of the 'lineItemPrice' field.
   */
  public com.hcl.hclmessaging.dto.auro.LineItemPrice getLineItemPrice() {
    return lineItemPrice;
  }

  /**
   * Sets the value of the 'lineItemPrice' field.
   * @param value the value to set.
   */
  public void setLineItemPrice(com.hcl.hclmessaging.dto.auro.LineItemPrice value) {
    this.lineItemPrice = value;
  }

  /**
   * Gets the value of the 'images' field.
   * @return The value of the 'images' field.
   */
  public java.util.List<com.hcl.hclmessaging.dto.auro.Image> getImages() {
    return images;
  }

  /**
   * Sets the value of the 'images' field.
   * @param value the value to set.
   */
  public void setImages(java.util.List<com.hcl.hclmessaging.dto.auro.Image> value) {
    this.images = value;
  }

  /**
   * Creates a new Sku RecordBuilder.
   * @return A new Sku RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.Sku.Builder newBuilder() {
    return new com.hcl.hclmessaging.dto.auro.Sku.Builder();
  }

  /**
   * Creates a new Sku RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sku RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.Sku.Builder newBuilder(com.hcl.hclmessaging.dto.auro.Sku.Builder other) {
    return new com.hcl.hclmessaging.dto.auro.Sku.Builder(other);
  }

  /**
   * Creates a new Sku RecordBuilder by copying an existing Sku instance.
   * @param other The existing instance to copy.
   * @return A new Sku RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.Sku.Builder newBuilder(com.hcl.hclmessaging.dto.auro.Sku other) {
    return new com.hcl.hclmessaging.dto.auro.Sku.Builder(other);
  }

  /**
   * RecordBuilder for Sku instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sku>
    implements org.apache.avro.data.RecordBuilder<Sku> {

    private int id;
    private java.lang.CharSequence code;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;
    private com.hcl.hclmessaging.dto.auro.LineItemPrice lineItemPrice;
    private com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder lineItemPriceBuilder;
    private java.util.List<com.hcl.hclmessaging.dto.auro.Image> images;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.Sku.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attributes)) {
        this.attributes = data().deepCopy(fields()[2].schema(), other.attributes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lineItemPrice)) {
        this.lineItemPrice = data().deepCopy(fields()[3].schema(), other.lineItemPrice);
        fieldSetFlags()[3] = true;
      }
      if (other.hasLineItemPriceBuilder()) {
        this.lineItemPriceBuilder = com.hcl.hclmessaging.dto.auro.LineItemPrice.newBuilder(other.getLineItemPriceBuilder());
      }
      if (isValidValue(fields()[4], other.images)) {
        this.images = data().deepCopy(fields()[4].schema(), other.images);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Sku instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.Sku other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attributes)) {
        this.attributes = data().deepCopy(fields()[2].schema(), other.attributes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lineItemPrice)) {
        this.lineItemPrice = data().deepCopy(fields()[3].schema(), other.lineItemPrice);
        fieldSetFlags()[3] = true;
      }
      this.lineItemPriceBuilder = null;
      if (isValidValue(fields()[4], other.images)) {
        this.images = data().deepCopy(fields()[4].schema(), other.images);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }

    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.attributes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItemPrice' field.
      * @return The value.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice getLineItemPrice() {
      return lineItemPrice;
    }

    /**
      * Sets the value of the 'lineItemPrice' field.
      * @param value The value of 'lineItemPrice'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setLineItemPrice(com.hcl.hclmessaging.dto.auro.LineItemPrice value) {
      validate(fields()[3], value);
      this.lineItemPriceBuilder = null;
      this.lineItemPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItemPrice' field has been set.
      * @return True if the 'lineItemPrice' field has been set, false otherwise.
      */
    public boolean hasLineItemPrice() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'lineItemPrice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder getLineItemPriceBuilder() {
      if (lineItemPriceBuilder == null) {
        if (hasLineItemPrice()) {
          setLineItemPriceBuilder(com.hcl.hclmessaging.dto.auro.LineItemPrice.newBuilder(lineItemPrice));
        } else {
          setLineItemPriceBuilder(com.hcl.hclmessaging.dto.auro.LineItemPrice.newBuilder());
        }
      }
      return lineItemPriceBuilder;
    }

    /**
     * Sets the Builder instance for the 'lineItemPrice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setLineItemPriceBuilder(com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder value) {
      clearLineItemPrice();
      lineItemPriceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lineItemPrice' field has an active Builder instance
     * @return True if the 'lineItemPrice' field has an active Builder instance
     */
    public boolean hasLineItemPriceBuilder() {
      return lineItemPriceBuilder != null;
    }

    /**
      * Clears the value of the 'lineItemPrice' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder clearLineItemPrice() {
      lineItemPrice = null;
      lineItemPriceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'images' field.
      * @return The value.
      */
    public java.util.List<com.hcl.hclmessaging.dto.auro.Image> getImages() {
      return images;
    }

    /**
      * Sets the value of the 'images' field.
      * @param value The value of 'images'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder setImages(java.util.List<com.hcl.hclmessaging.dto.auro.Image> value) {
      validate(fields()[4], value);
      this.images = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'images' field has been set.
      * @return True if the 'images' field has been set, false otherwise.
      */
    public boolean hasImages() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'images' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.Sku.Builder clearImages() {
      images = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sku build() {
      try {
        Sku record = new Sku();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.attributes = fieldSetFlags()[2] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        if (lineItemPriceBuilder != null) {
          record.lineItemPrice = this.lineItemPriceBuilder.build();
        } else {
          record.lineItemPrice = fieldSetFlags()[3] ? this.lineItemPrice : (com.hcl.hclmessaging.dto.auro.LineItemPrice) defaultValue(fields()[3]);
        }
        record.images = fieldSetFlags()[4] ? this.images : (java.util.List<com.hcl.hclmessaging.dto.auro.Image>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sku>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sku>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sku>
    READER$ = (org.apache.avro.io.DatumReader<Sku>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hcl.hclmessaging.dto.auro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShippingMethod extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3650534005727231393L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShippingMethod\",\"namespace\":\"com.hcl.hclmessaging.dto.auro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"Price\",\"fields\":[{\"name\":\"currencyCode\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"bytes\",\"logicalType\":\"decimal\",\"java-class\":\"java.math.BigDecimal\",\"precision\":4,\"scale\":2}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ShippingMethod> ENCODER =
      new BinaryMessageEncoder<ShippingMethod>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShippingMethod> DECODER =
      new BinaryMessageDecoder<ShippingMethod>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ShippingMethod> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ShippingMethod> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ShippingMethod>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ShippingMethod to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ShippingMethod from a ByteBuffer. */
  public static ShippingMethod fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public com.hcl.hclmessaging.dto.auro.Price price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShippingMethod() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param price The new value for price
   */
  public ShippingMethod(java.lang.CharSequence id, java.lang.CharSequence name, com.hcl.hclmessaging.dto.auro.Price price) {
    this.id = id;
    this.name = name;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: price = (com.hcl.hclmessaging.dto.auro.Price)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public com.hcl.hclmessaging.dto.auro.Price getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(com.hcl.hclmessaging.dto.auro.Price value) {
    this.price = value;
  }

  /**
   * Creates a new ShippingMethod RecordBuilder.
   * @return A new ShippingMethod RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder newBuilder() {
    return new com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder();
  }

  /**
   * Creates a new ShippingMethod RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShippingMethod RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder newBuilder(com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder other) {
    return new com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder(other);
  }

  /**
   * Creates a new ShippingMethod RecordBuilder by copying an existing ShippingMethod instance.
   * @param other The existing instance to copy.
   * @return A new ShippingMethod RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder newBuilder(com.hcl.hclmessaging.dto.auro.ShippingMethod other) {
    return new com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder(other);
  }

  /**
   * RecordBuilder for ShippingMethod instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShippingMethod>
    implements org.apache.avro.data.RecordBuilder<ShippingMethod> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private com.hcl.hclmessaging.dto.auro.Price price;
    private com.hcl.hclmessaging.dto.auro.Price.Builder priceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPriceBuilder()) {
        this.priceBuilder = com.hcl.hclmessaging.dto.auro.Price.newBuilder(other.getPriceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ShippingMethod instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.ShippingMethod other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      this.priceBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public com.hcl.hclmessaging.dto.auro.Price getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder setPrice(com.hcl.hclmessaging.dto.auro.Price value) {
      validate(fields()[2], value);
      this.priceBuilder = null;
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.hcl.hclmessaging.dto.auro.Price.Builder getPriceBuilder() {
      if (priceBuilder == null) {
        if (hasPrice()) {
          setPriceBuilder(com.hcl.hclmessaging.dto.auro.Price.newBuilder(price));
        } else {
          setPriceBuilder(com.hcl.hclmessaging.dto.auro.Price.newBuilder());
        }
      }
      return priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder setPriceBuilder(com.hcl.hclmessaging.dto.auro.Price.Builder value) {
      clearPrice();
      priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'price' field has an active Builder instance
     * @return True if the 'price' field has an active Builder instance
     */
    public boolean hasPriceBuilder() {
      return priceBuilder != null;
    }

    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.ShippingMethod.Builder clearPrice() {
      price = null;
      priceBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShippingMethod build() {
      try {
        ShippingMethod record = new ShippingMethod();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (priceBuilder != null) {
          record.price = this.priceBuilder.build();
        } else {
          record.price = fieldSetFlags()[2] ? this.price : (com.hcl.hclmessaging.dto.auro.Price) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShippingMethod>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShippingMethod>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShippingMethod>
    READER$ = (org.apache.avro.io.DatumReader<ShippingMethod>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

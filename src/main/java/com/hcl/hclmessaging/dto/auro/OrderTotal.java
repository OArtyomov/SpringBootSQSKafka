/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hcl.hclmessaging.dto.auro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderTotal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2816689033649115519L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderTotal\",\"namespace\":\"com.hcl.hclmessaging.dto.auro\",\"fields\":[{\"name\":\"currencyCode\",\"type\":\"string\"},{\"name\":\"subtotal\",\"type\":\"int\"},{\"name\":\"tax\",\"type\":\"int\"},{\"name\":\"shipping\",\"type\":\"int\"},{\"name\":\"discount\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderTotal> ENCODER =
      new BinaryMessageEncoder<OrderTotal>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderTotal> DECODER =
      new BinaryMessageDecoder<OrderTotal>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OrderTotal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OrderTotal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderTotal>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OrderTotal to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OrderTotal from a ByteBuffer. */
  public static OrderTotal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence currencyCode;
  @Deprecated public int subtotal;
  @Deprecated public int tax;
  @Deprecated public int shipping;
  @Deprecated public int discount;
  @Deprecated public int total;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderTotal() {}

  /**
   * All-args constructor.
   * @param currencyCode The new value for currencyCode
   * @param subtotal The new value for subtotal
   * @param tax The new value for tax
   * @param shipping The new value for shipping
   * @param discount The new value for discount
   * @param total The new value for total
   */
  public OrderTotal(java.lang.CharSequence currencyCode, java.lang.Integer subtotal, java.lang.Integer tax, java.lang.Integer shipping, java.lang.Integer discount, java.lang.Integer total) {
    this.currencyCode = currencyCode;
    this.subtotal = subtotal;
    this.tax = tax;
    this.shipping = shipping;
    this.discount = discount;
    this.total = total;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currencyCode;
    case 1: return subtotal;
    case 2: return tax;
    case 3: return shipping;
    case 4: return discount;
    case 5: return total;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currencyCode = (java.lang.CharSequence)value$; break;
    case 1: subtotal = (java.lang.Integer)value$; break;
    case 2: tax = (java.lang.Integer)value$; break;
    case 3: shipping = (java.lang.Integer)value$; break;
    case 4: discount = (java.lang.Integer)value$; break;
    case 5: total = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currencyCode' field.
   * @return The value of the 'currencyCode' field.
   */
  public java.lang.CharSequence getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Sets the value of the 'currencyCode' field.
   * @param value the value to set.
   */
  public void setCurrencyCode(java.lang.CharSequence value) {
    this.currencyCode = value;
  }

  /**
   * Gets the value of the 'subtotal' field.
   * @return The value of the 'subtotal' field.
   */
  public java.lang.Integer getSubtotal() {
    return subtotal;
  }

  /**
   * Sets the value of the 'subtotal' field.
   * @param value the value to set.
   */
  public void setSubtotal(java.lang.Integer value) {
    this.subtotal = value;
  }

  /**
   * Gets the value of the 'tax' field.
   * @return The value of the 'tax' field.
   */
  public java.lang.Integer getTax() {
    return tax;
  }

  /**
   * Sets the value of the 'tax' field.
   * @param value the value to set.
   */
  public void setTax(java.lang.Integer value) {
    this.tax = value;
  }

  /**
   * Gets the value of the 'shipping' field.
   * @return The value of the 'shipping' field.
   */
  public java.lang.Integer getShipping() {
    return shipping;
  }

  /**
   * Sets the value of the 'shipping' field.
   * @param value the value to set.
   */
  public void setShipping(java.lang.Integer value) {
    this.shipping = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public java.lang.Integer getDiscount() {
    return discount;
  }

  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(java.lang.Integer value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.lang.Integer getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Integer value) {
    this.total = value;
  }

  /**
   * Creates a new OrderTotal RecordBuilder.
   * @return A new OrderTotal RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.OrderTotal.Builder newBuilder() {
    return new com.hcl.hclmessaging.dto.auro.OrderTotal.Builder();
  }

  /**
   * Creates a new OrderTotal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderTotal RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.OrderTotal.Builder newBuilder(com.hcl.hclmessaging.dto.auro.OrderTotal.Builder other) {
    return new com.hcl.hclmessaging.dto.auro.OrderTotal.Builder(other);
  }

  /**
   * Creates a new OrderTotal RecordBuilder by copying an existing OrderTotal instance.
   * @param other The existing instance to copy.
   * @return A new OrderTotal RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.OrderTotal.Builder newBuilder(com.hcl.hclmessaging.dto.auro.OrderTotal other) {
    return new com.hcl.hclmessaging.dto.auro.OrderTotal.Builder(other);
  }

  /**
   * RecordBuilder for OrderTotal instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderTotal>
    implements org.apache.avro.data.RecordBuilder<OrderTotal> {

    private java.lang.CharSequence currencyCode;
    private int subtotal;
    private int tax;
    private int shipping;
    private int discount;
    private int total;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.OrderTotal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[0].schema(), other.currencyCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subtotal)) {
        this.subtotal = data().deepCopy(fields()[1].schema(), other.subtotal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tax)) {
        this.tax = data().deepCopy(fields()[2].schema(), other.tax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shipping)) {
        this.shipping = data().deepCopy(fields()[3].schema(), other.shipping);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.total)) {
        this.total = data().deepCopy(fields()[5].schema(), other.total);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrderTotal instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.OrderTotal other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[0].schema(), other.currencyCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subtotal)) {
        this.subtotal = data().deepCopy(fields()[1].schema(), other.subtotal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tax)) {
        this.tax = data().deepCopy(fields()[2].schema(), other.tax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shipping)) {
        this.shipping = data().deepCopy(fields()[3].schema(), other.shipping);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.total)) {
        this.total = data().deepCopy(fields()[5].schema(), other.total);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'currencyCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrencyCode() {
      return currencyCode;
    }

    /**
      * Sets the value of the 'currencyCode' field.
      * @param value The value of 'currencyCode'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setCurrencyCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.currencyCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyCode' field has been set.
      * @return True if the 'currencyCode' field has been set, false otherwise.
      */
    public boolean hasCurrencyCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currencyCode' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearCurrencyCode() {
      currencyCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subtotal' field.
      * @return The value.
      */
    public java.lang.Integer getSubtotal() {
      return subtotal;
    }

    /**
      * Sets the value of the 'subtotal' field.
      * @param value The value of 'subtotal'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setSubtotal(int value) {
      validate(fields()[1], value);
      this.subtotal = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subtotal' field has been set.
      * @return True if the 'subtotal' field has been set, false otherwise.
      */
    public boolean hasSubtotal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subtotal' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearSubtotal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tax' field.
      * @return The value.
      */
    public java.lang.Integer getTax() {
      return tax;
    }

    /**
      * Sets the value of the 'tax' field.
      * @param value The value of 'tax'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setTax(int value) {
      validate(fields()[2], value);
      this.tax = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tax' field has been set.
      * @return True if the 'tax' field has been set, false otherwise.
      */
    public boolean hasTax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tax' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearTax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipping' field.
      * @return The value.
      */
    public java.lang.Integer getShipping() {
      return shipping;
    }

    /**
      * Sets the value of the 'shipping' field.
      * @param value The value of 'shipping'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setShipping(int value) {
      validate(fields()[3], value);
      this.shipping = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'shipping' field has been set.
      * @return True if the 'shipping' field has been set, false otherwise.
      */
    public boolean hasShipping() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'shipping' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearShipping() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public java.lang.Integer getDiscount() {
      return discount;
    }

    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setDiscount(int value) {
      validate(fields()[4], value);
      this.discount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearDiscount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.lang.Integer getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder setTotal(int value) {
      validate(fields()[5], value);
      this.total = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.OrderTotal.Builder clearTotal() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderTotal build() {
      try {
        OrderTotal record = new OrderTotal();
        record.currencyCode = fieldSetFlags()[0] ? this.currencyCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.subtotal = fieldSetFlags()[1] ? this.subtotal : (java.lang.Integer) defaultValue(fields()[1]);
        record.tax = fieldSetFlags()[2] ? this.tax : (java.lang.Integer) defaultValue(fields()[2]);
        record.shipping = fieldSetFlags()[3] ? this.shipping : (java.lang.Integer) defaultValue(fields()[3]);
        record.discount = fieldSetFlags()[4] ? this.discount : (java.lang.Integer) defaultValue(fields()[4]);
        record.total = fieldSetFlags()[5] ? this.total : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderTotal>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderTotal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderTotal>
    READER$ = (org.apache.avro.io.DatumReader<OrderTotal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

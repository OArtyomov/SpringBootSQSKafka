/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hcl.hclmessaging.dto.auro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LineItemPrice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3042695822170418946L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineItemPrice\",\"namespace\":\"com.hcl.hclmessaging.dto.auro\",\"fields\":[{\"name\":\"currencyCode\",\"type\":\"string\"},{\"name\":\"itemPriceBeforeDiscount\",\"type\":\"int\"},{\"name\":\"discount\",\"type\":\"int\"},{\"name\":\"itemPriceAfterDiscount\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineItemPrice> ENCODER =
      new BinaryMessageEncoder<LineItemPrice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineItemPrice> DECODER =
      new BinaryMessageDecoder<LineItemPrice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LineItemPrice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LineItemPrice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LineItemPrice>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LineItemPrice to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LineItemPrice from a ByteBuffer. */
  public static LineItemPrice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence currencyCode;
  @Deprecated public int itemPriceBeforeDiscount;
  @Deprecated public int discount;
  @Deprecated public int itemPriceAfterDiscount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineItemPrice() {}

  /**
   * All-args constructor.
   * @param currencyCode The new value for currencyCode
   * @param itemPriceBeforeDiscount The new value for itemPriceBeforeDiscount
   * @param discount The new value for discount
   * @param itemPriceAfterDiscount The new value for itemPriceAfterDiscount
   */
  public LineItemPrice(java.lang.CharSequence currencyCode, java.lang.Integer itemPriceBeforeDiscount, java.lang.Integer discount, java.lang.Integer itemPriceAfterDiscount) {
    this.currencyCode = currencyCode;
    this.itemPriceBeforeDiscount = itemPriceBeforeDiscount;
    this.discount = discount;
    this.itemPriceAfterDiscount = itemPriceAfterDiscount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currencyCode;
    case 1: return itemPriceBeforeDiscount;
    case 2: return discount;
    case 3: return itemPriceAfterDiscount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currencyCode = (java.lang.CharSequence)value$; break;
    case 1: itemPriceBeforeDiscount = (java.lang.Integer)value$; break;
    case 2: discount = (java.lang.Integer)value$; break;
    case 3: itemPriceAfterDiscount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currencyCode' field.
   * @return The value of the 'currencyCode' field.
   */
  public java.lang.CharSequence getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Sets the value of the 'currencyCode' field.
   * @param value the value to set.
   */
  public void setCurrencyCode(java.lang.CharSequence value) {
    this.currencyCode = value;
  }

  /**
   * Gets the value of the 'itemPriceBeforeDiscount' field.
   * @return The value of the 'itemPriceBeforeDiscount' field.
   */
  public java.lang.Integer getItemPriceBeforeDiscount() {
    return itemPriceBeforeDiscount;
  }

  /**
   * Sets the value of the 'itemPriceBeforeDiscount' field.
   * @param value the value to set.
   */
  public void setItemPriceBeforeDiscount(java.lang.Integer value) {
    this.itemPriceBeforeDiscount = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public java.lang.Integer getDiscount() {
    return discount;
  }

  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(java.lang.Integer value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'itemPriceAfterDiscount' field.
   * @return The value of the 'itemPriceAfterDiscount' field.
   */
  public java.lang.Integer getItemPriceAfterDiscount() {
    return itemPriceAfterDiscount;
  }

  /**
   * Sets the value of the 'itemPriceAfterDiscount' field.
   * @param value the value to set.
   */
  public void setItemPriceAfterDiscount(java.lang.Integer value) {
    this.itemPriceAfterDiscount = value;
  }

  /**
   * Creates a new LineItemPrice RecordBuilder.
   * @return A new LineItemPrice RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder newBuilder() {
    return new com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder();
  }

  /**
   * Creates a new LineItemPrice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineItemPrice RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder newBuilder(com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder other) {
    return new com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder(other);
  }

  /**
   * Creates a new LineItemPrice RecordBuilder by copying an existing LineItemPrice instance.
   * @param other The existing instance to copy.
   * @return A new LineItemPrice RecordBuilder
   */
  public static com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder newBuilder(com.hcl.hclmessaging.dto.auro.LineItemPrice other) {
    return new com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder(other);
  }

  /**
   * RecordBuilder for LineItemPrice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineItemPrice>
    implements org.apache.avro.data.RecordBuilder<LineItemPrice> {

    private java.lang.CharSequence currencyCode;
    private int itemPriceBeforeDiscount;
    private int discount;
    private int itemPriceAfterDiscount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[0].schema(), other.currencyCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemPriceBeforeDiscount)) {
        this.itemPriceBeforeDiscount = data().deepCopy(fields()[1].schema(), other.itemPriceBeforeDiscount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.discount)) {
        this.discount = data().deepCopy(fields()[2].schema(), other.discount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemPriceAfterDiscount)) {
        this.itemPriceAfterDiscount = data().deepCopy(fields()[3].schema(), other.itemPriceAfterDiscount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LineItemPrice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hcl.hclmessaging.dto.auro.LineItemPrice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[0].schema(), other.currencyCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemPriceBeforeDiscount)) {
        this.itemPriceBeforeDiscount = data().deepCopy(fields()[1].schema(), other.itemPriceBeforeDiscount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.discount)) {
        this.discount = data().deepCopy(fields()[2].schema(), other.discount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemPriceAfterDiscount)) {
        this.itemPriceAfterDiscount = data().deepCopy(fields()[3].schema(), other.itemPriceAfterDiscount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'currencyCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrencyCode() {
      return currencyCode;
    }

    /**
      * Sets the value of the 'currencyCode' field.
      * @param value The value of 'currencyCode'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder setCurrencyCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.currencyCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyCode' field has been set.
      * @return True if the 'currencyCode' field has been set, false otherwise.
      */
    public boolean hasCurrencyCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currencyCode' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder clearCurrencyCode() {
      currencyCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemPriceBeforeDiscount' field.
      * @return The value.
      */
    public java.lang.Integer getItemPriceBeforeDiscount() {
      return itemPriceBeforeDiscount;
    }

    /**
      * Sets the value of the 'itemPriceBeforeDiscount' field.
      * @param value The value of 'itemPriceBeforeDiscount'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder setItemPriceBeforeDiscount(int value) {
      validate(fields()[1], value);
      this.itemPriceBeforeDiscount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemPriceBeforeDiscount' field has been set.
      * @return True if the 'itemPriceBeforeDiscount' field has been set, false otherwise.
      */
    public boolean hasItemPriceBeforeDiscount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemPriceBeforeDiscount' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder clearItemPriceBeforeDiscount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public java.lang.Integer getDiscount() {
      return discount;
    }

    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder setDiscount(int value) {
      validate(fields()[2], value);
      this.discount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder clearDiscount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemPriceAfterDiscount' field.
      * @return The value.
      */
    public java.lang.Integer getItemPriceAfterDiscount() {
      return itemPriceAfterDiscount;
    }

    /**
      * Sets the value of the 'itemPriceAfterDiscount' field.
      * @param value The value of 'itemPriceAfterDiscount'.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder setItemPriceAfterDiscount(int value) {
      validate(fields()[3], value);
      this.itemPriceAfterDiscount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemPriceAfterDiscount' field has been set.
      * @return True if the 'itemPriceAfterDiscount' field has been set, false otherwise.
      */
    public boolean hasItemPriceAfterDiscount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemPriceAfterDiscount' field.
      * @return This builder.
      */
    public com.hcl.hclmessaging.dto.auro.LineItemPrice.Builder clearItemPriceAfterDiscount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineItemPrice build() {
      try {
        LineItemPrice record = new LineItemPrice();
        record.currencyCode = fieldSetFlags()[0] ? this.currencyCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.itemPriceBeforeDiscount = fieldSetFlags()[1] ? this.itemPriceBeforeDiscount : (java.lang.Integer) defaultValue(fields()[1]);
        record.discount = fieldSetFlags()[2] ? this.discount : (java.lang.Integer) defaultValue(fields()[2]);
        record.itemPriceAfterDiscount = fieldSetFlags()[3] ? this.itemPriceAfterDiscount : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineItemPrice>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineItemPrice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineItemPrice>
    READER$ = (org.apache.avro.io.DatumReader<LineItemPrice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
